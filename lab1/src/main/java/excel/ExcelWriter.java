package excel;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.usermodel.charts.*;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

/**
 * This class is needed to write statistics to the excel file (.xlsx).
 * The statistics are generated by the Analyzer class. This class writes
 * to the file a data table and makes a chart for this one.
 * @author Volodymyr Kamyshanov bingooo1337@gmail.com
 */
public class ExcelWriter {
    /**
     * Workbook where data will be written.
     */
    private Workbook workbook;
    /**
     * Name of the xlsx file where workbook will be written.
     */
    private String filename;
    /**
     * Map with statistics. Each key is the name of the filler (will be a name of the sheet).<br>
     * Each value is two-dimensional array of results. In it, the first line is a header. In each next line, the name of the sort method and the results of the<br>
     * sorting time on different arrays.
     */
    private Map<String, ArrayList<ArrayList<String>>> statistics;

    /**
     * Create an ExcelWriter for specific filename and map of statistics for writing to file.
     * @param filename name of the future file for writing (extension will be added automatically).
     * @param sheetsAndData map with filler names (key) and ArrayList of generated arrays by this filler (value).
     */
    public ExcelWriter(String filename, Map<String, ArrayList<ArrayList<String>>> sheetsAndData) {
        this.workbook = new XSSFWorkbook();
        this.filename = filename + ".xlsx";
        this.statistics = sheetsAndData;
    }

    /**
     * Method invoke {@link #createSheetAndFill(String, ArrayList)} for every pair in the statistic map.<br>
     * And then invoke {@link #writeToFile()}.
     */
    public void write() {
        statistics.forEach(this::createSheetAndFill);
        writeToFile();
    }

    /**
     * Creates a sheet with specific name in the excel file and writes data to this sheet.
     * @param sheetTitle name of the sheet for creating and filling with data.
     * @param data ArrayList of data for writing to the sheet.
     */
    private void createSheetAndFill(String sheetTitle, ArrayList<ArrayList<String>> data) {
        Sheet sheet = workbook.createSheet(sheetTitle);
        sheet.setDefaultColumnWidth(20);

        Chart chart = createChartWithLegend(sheet, data.size() + 2, data.get(0).size());
        LineChartData chartData = createChartData(chart);

        ChartDataSource<Number> xAxis = DataSources.fromNumericCellRange(sheet,
                new CellRangeAddress(0, 0, 1, data.get(0).size() - 1));

        fillWithData(data, sheet, chartData, xAxis);

        ChartAxis bottomAxis = chart.getChartAxisFactory().createCategoryAxis(AxisPosition.BOTTOM);
        ValueAxis valueAxis = chart.getChartAxisFactory().createValueAxis(AxisPosition.LEFT);
        valueAxis.setCrosses(AxisCrosses.AUTO_ZERO);

        chart.plot(chartData, bottomAxis, valueAxis);
    }

    /**
     * Fills specific sheet with data and creates a chart of this one.
     * @param data ArrayList of data to be written.
     * @param sheet sheet for writing dara.
     * @param chartData LineChartData object for creating chart.
     * @param xAxis Axis for the chart.
     */
    private void fillWithData(ArrayList<ArrayList<String>> data, Sheet sheet, LineChartData chartData, ChartDataSource<Number> xAxis) {
        for (int i = 0; i < data.size(); i++) {
            ArrayList<String> list = data.get(i);
            Row row = sheet.createRow(i);
            for (int j = 0; j < list.size(); j++) {
                String value = list.get(j);
                try {
                    row.createCell(j).setCellValue(Double.parseDouble(value));
                } catch (NumberFormatException ex) {
                    row.createCell(j).setCellValue(value);
                }
            }
            if (i != 0)
                chartData.addSeries(xAxis,
                        DataSources.fromNumericCellRange(sheet,
                                new CellRangeAddress(i, i, 1, list.size() - 1)))
                        .setTitle(list.get(0));
        }
    }

    /**
     * Return Chart with legend for specific sheet.
     * @param sheet sheet for chart
     * @param startRow start row for drawing a chart.
     * @param endColumn finish column for drawing a chart.
     * @return Chart with legend for specific sheet.
     */
    private Chart createChartWithLegend(Sheet sheet, int startRow, int endColumn) {
        Drawing drawing = sheet.createDrawingPatriarch();
        ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 0, startRow, endColumn, startRow + 30);

        Chart chart = drawing.createChart(anchor);
        ChartLegend chartLegend = chart.getOrCreateLegend();
        chartLegend.setPosition(LegendPosition.BOTTOM);
        return chart;
    }

    /**
     * Return LineChartData object for specific Chart.
     * @param chart Chart object for which need to create LineChartData.
     * @return LineChartData object for specific Chart.
     */
    private LineChartData createChartData(Chart chart) {
        return chart.getChartDataFactory().createLineChartData();
    }

    /**
     * Write created workbook to the excel file.
     */
    private void writeToFile() {
        try {
            workbook.write(new FileOutputStream(filename));
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
